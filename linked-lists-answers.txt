###Exercises

1. The pros of using linked lists instead of arrays are that they have a dynamic size instead of a fixed size, they
are more efficient with insertions and deletions than arrays, and they do not waste memory. The cons are that they
have no random access like with indexes, and sequential access is slower. 

2. A real-world example of a linked-list would be web browswer history. When you check your history on browser you see the
previously visited sites and also using the forward and backward arrow to go to the specifics links in the linked lists. 


###Programming Questions

1. You can only have one head a linked list. The code given is making it to where it sets the head to the new node
if the head node does not exist (meaning nothing in the list) or if the head does exist then it will make the current
one the head which cannot happen since there can only be one head in the linked list. 


FUNCTION push(element)
  CREATE node
  SET node.value TO element
  SET node.next TO null

  IF the head node does not exist
    THEN SET head to node
  ELSE
    SET current to node
  END IF
END FUNCTION

function LinkedList() {
    var length = 0;
    var head = null;
    var Node = function(element) {
        this.element = element;
        this.next = null;
    };

    this.size = function() {
        return length;
    };

    this.head = function() {
        return head;
    };

    this.push = function(element) {
        var node = new Node(element);
        if (head === null) {
            head = node;
        } else {
            var currentNode = head;
            while (currentNode.next) {
                currentNode = currentNode.next;
            }
            currentNode.next = node;
        }
        length ++;
    };
}

const newList = new LinkedList();
newList.push(1);
newList.push(2);
newList.push(3);
console.log(newList.size());


2. 

function LinkedList() {
    var length = 0;
    var head = null;
    var Node = function(element) {
        this.element = element;
        this.next = null;
    };

    this.size = function() {
        return length;
    };

    this.head = function() {
        return head;
    };

    this.push = function(element) {
        var node = new Node(element);
        if (head === null) {
            head = node;
        } else {
            var currentNode = head;
            while (currentNode.next) {
                currentNode = currentNode.next;
            }
            currentNode.next = node;
        }
        length ++;
    };

    this.removeDuplicates = function() {
      current = this.head;
      while(current != null) {
        if(!current.element) {
          current.element = true;
        } else {
          current = current.next;
          length --;
        }
      } 
    };
}

const newList = new LinkedList();
newList.push(1);
newList.push(3);
newList.push(4);
newList.push(4);
console.log(newList.head());
console.log(newList.size());
newList.removeDuplicates();
console.log(newList.head());
console.log(newList.size());

3. 

function LinkedList() {
    var length = 0;
    var head = null;
    var Node = function(element) {
        this.element = element;
        this.next = null;
    };

    this.size = function() {
        return length;
    };

    this.head = function() {
        return head;
    };

    this.push = function(element) {
        var node = new Node(element);
        if (head === null) {
            head = node;
        } else {
            var currentNode = head;
            while (currentNode.next) {
                currentNode = currentNode.next;
            }
            currentNode.next = node;
        }
        length ++;
    };
}

function reverse(head) {
    newHead = head;
    oldHead = head.next;
    newHead.next = null;
    while (oldHead) {
        current = oldHead;
        oldHead = oldHead.next;
        current.next = newHead;
        newHead = current;
    }
    return newHead;
}

let newList = new LinkedList();
newList.push(1);
newList.push(2);
newList.push(3);
newList.push(4);
console.log(reverse(newList.head()));



