###Exercises

1. A binary tree is a data structure that consists of nodes and each node may point to a left and a right child. What
makes it unique from other trees is that it only has up to two nodes which makes it more efficient to search through
than other trees since it is only up to two choices per node.

2. Heuristics is when engineers use their best guesses when trying to solve an immense task like finding all possible
paths on a map. A big example is as long as we are getting closer to to the end of the path then we will find one of 
the shortest paths. 

3. I would say one problem that would use heuristics would be for most games on predictability like chess. There are
too many ways to know the best path so you would use the typical rule of thumbs or guesstimates to move.

4. Depth-first search is starting at the root node and then picking either the right or left side and then travelling
down that branch until it reaches the leaf node and then backtracks and goes to the next branch and repeats. Breadth-first 
search is starting at the root node then going either to the left or right child of that node and then if its not the
right node then you go to the other child node and then repeat in that kind of horizontal pattern.

5. An undirected, a-cyclic, unweighted graph would have nodes that connect each other ambiguously, do not form loops, and
would not assign cost of travel. The first graph I think of like that would be a doubly linked list. 

6. A binary search tree would be a directed, a-cyclic, unweighted graph. 


###Programming Questions

1. 

class Node {
    constructor(data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

class BST {
    constructor() {
        this.root = null;
    }

    add(data) {
        const node = this.root;
        if (node === null) {
            this.root = new Node(data);
            return;
        } else {
            const searchTree = function(node) {
                if (data < node.data) {
                    if (node.left === null) {
                        node.left = new Node(data);
                        return;
                    } else if (node.left !== null) {
                        return searchTree(node.left);
                    }
                } else if (data > node.data) {
                    if (node.right === null) {
                        node.right = new Node(data);
                        return;
                    } else if (node.right !== null) {
                        return searchTree(node.right);
                    }
                } else {
                    return null;
                }
            };
            return searchTree(node);
        }
    }
    
    isPresent(data) {
        let current = this.root;
        while (current) {
            if (data === current.data) {
                return true;
            }
            if (data < current.data) {
                current = current.left;
            } else {
                current = current.right;
            }
        }
        return false;
    }
}

const bst = new BST();
bst.add(2);
bst.add(5);
bst.add(1);
bst.add(7);
bst.add(12);
bst.add(10);
console.log(bst.isPresent(3));


2. 

class BinarySearchTree {
  constructor(value) {
    this.value = value;
    this.left = null;
    this.right = null;
  }

  insert(value) {
    var newNode = new BinarySearchTree(value);
    function addNode(bst) {
      if (bst.value >= value && bst.left === null) {
        bst.left = newNode;
      } else if (bst.value >= value) {
        addNode(bst.left);
      } else if (bst.value < value && bst.right === null) {
        bst.right = newNode;
      } else {
        addNode(bst.right);
      }
    }
    addNode(this);
  }

  searchValue(value) {
      function search(bst) {
        if (bst.value === value) {
          return true;
        } else if (bst.value > value && bst.left !== null) {
          return search(bst.left);
        } else if (bst.value < value && bst.right !== null) {
          return search(bst.right);
        } else {
          return false;
        }
      }
      return search(this);
  }

  findDistance(valueStart, valueEnd) {
    if (this.searchValue(valueStart) === false || this.searchValue(valueEnd) === false) {
      return;
    }
    var leftValue = valueStart > valueEnd ? valueEnd : valueStart;
    var rightValue = valueStart < valueEnd ? valueEnd : valueStart;
    var leftDistance = 0;
    var rightDistance = 0;
    function distance(bst) {
      if (bst.value > valueStart && bst.value > valueEnd) {
        distance(bst.left);
      } else if (bst.value < valueStart && bst.value < valueEnd) {
        distance(bst.right);
      } else {
        var refLeft = bst;
        while (leftValue !== refLeft.value) {
          leftDistance++;
          refLeft = leftValue < refLeft.value ? refLeft.left : refLeft.right;
        }
        while (rightValue > bst.value) {
          rightDistance++;
          bst = bst.value < rightValue ? bst.right: bst.left;
        }
        return leftDistance+rightDistance;
      }
    }
    return distance(this);
  }


}


let tree = new BinarySearchTree(8);
var add = [2, 5, 7, 10, 13, 4, 6, 1];
for (i=0; i<add.length; i++) {
  tree.insert(add[i]);
}

console.log(tree);

console.log(tree.findDistance(2, 8));
console.log(tree.findDistance(1,13));

